for(g in 1:nrow(x)){
within_clusters_sum_of_squares = (sum(x[g,] - centers[clusters[g],]))^2
}
y = list(clusters,centers, within_clusters_sum_of_squares)
names(y) = c("cluster partition", "cluster means", "within clusters sum of squares")
return(y)
}
kmeans_function(gexpr_t,2)
km$tot.withinss
km$tot.withinss
km$tot.withinss
kmeans_function(gexpr_t,2)
kmeans_function(gexpr_t,2)
kmeans_function(gexpr_t,2)
kmeans_function(USArrests[,1:4],3)
kmeans(USArrests[,1:4],3)$tot.withinss
# could be the ones that affect their health
# Question 2
# a)
kmeans_function = function(x,k){
#making sure that the data entered are in matrix form
x = as.matrix(x)
#choosing the initial means randomly
initial_means = x[sample(nrow(x),size=k,replace=FALSE),]
old_clusters = rep(1,nrow(x))
clusters = rep(2, nrow(x))
# Create an empty matrix which will later be populated with the distance of the matrix
#points to the means
distance_from_means = matrix(nrow = nrow(x), ncol = k)
while(all(old_clusters != clusters)){
# Set the old clusters equal to the clusters found
old_clusters = clusters
for(i in 1:nrow(x)){
for(j in 1:k){
# Find the euclidian distance for each each row to the k randomly selected initial means
distance = sqrt(sum((x[i,] - initial_means[j,])^2))
# populate the columns of the matrix with the distances
distance_from_means[i,j] = distance
}
}
# Assign clusters based on which distance is closer to the means
clusters = apply(distance_from_means, 1, which.min)
# Find the means of the different clusters
centers = apply(x, 2, tapply, clusters, mean)
#for (s in 1:k){
#  for(g in 1:nrow(x)){
#    within_clusters_sum_of_squares = sum(x[clusters,] - centers[s,])^2
# }
#}
# Set the new means as the initial means in order to run the for loop with the new means
initial_means = centers
}
within_clusters_sum_of_squares = 0
for(g in 1:nrow(x)){
within_clusters_sum_of_squares =  within_clusters_sum_of_squares + sum((x[g,] - centers[clusters[g],])^2)
}
y = list(clusters,centers, within_clusters_sum_of_squares)
names(y) = c("cluster partition", "cluster means", "within clusters sum of squares")
return(y)
}
kmeans_function(gexpr_t,2)
# Question 2
# a)
kmeans_function = function(x,k){
#making sure that the data entered are in matrix form
x = as.matrix(x)
#choosing the initial means randomly
initial_means = x[sample(nrow(x),size=k,replace=FALSE),]
old_clusters = rep(1,nrow(x))
clusters = rep(2, nrow(x))
# Create an empty matrix which will later be populated with the distance of the matrix
#points to the means
distance_from_means = matrix(nrow = nrow(x), ncol = k)
while(all(old_clusters != clusters)){
# Set the old clusters equal to the clusters found
old_clusters = clusters
for(i in 1:nrow(x)){
for(j in 1:k){
# Find the euclidian distance for each each row to the k randomly selected initial means
distance = sqrt(sum((x[i,] - initial_means[j,])^2))
# populate the columns of the matrix with the distances
distance_from_means[i,j] = distance
}
}
# Assign clusters based on which distance is closer to the means
clusters = apply(distance_from_means, 1, which.min)
# Find the means of the different clusters
centers = apply(x, 2, tapply, clusters, mean)
#for (s in 1:k){
#  for(g in 1:nrow(x)){
#    within_clusters_sum_of_squares = sum(x[clusters,] - centers[s,])^2
# }
#}
# Set the new means as the initial means in order to run the for loop with the new means
initial_means = centers
}
within_clusters_sum_of_squares = 0
for(g in 1:nrow(x)){
within_clusters_sum_of_squares =  within_clusters_sum_of_squares + sum((x[g,] - centers[clusters[g],])^2)
}
y = list(clusters,centers, within_clusters_sum_of_squares)
names(y) = c("cluster partition", "cluster means", "within clusters sum of squares")
return(y)
}
kmeans_function(gexpr_t,2)
kmeans_function(USArrests[,1:4],3)
kmeans(USArrests[,1:4],3)$tot.withinss
# Question 2
# a)
kmeans_function = function(x,k){
#making sure that the data entered are in matrix form
x = as.matrix(x)
#choosing the initial means randomly
initial_means = x[sample(nrow(x),size=k,replace=FALSE),]
old_clusters = rep(1,nrow(x))
clusters = rep(2, nrow(x))
# Create an empty matrix which will later be populated with the distance of the matrix
#points to the means
distance_from_means = matrix(nrow = nrow(x), ncol = k)
while(all(old_clusters != clusters)){
# Set the old clusters equal to the clusters found
old_clusters = clusters
for(i in 1:nrow(x)){
for(j in 1:k){
# Find the euclidian distance for each each row to the k randomly selected initial means
distance = sqrt(sum((x[i,] - initial_means[j,])^2))
# populate the columns of the matrix with the distances
distance_from_means[i,j] = distance
}
}
# Assign clusters based on which distance is closer to the means
clusters = apply(distance_from_means, 1, which.min)
# Find the means of the different clusters
centers = apply(x, 2, tapply, clusters, mean)
# Set the new means as the initial means in order to run the for loop with the new means
initial_means = centers
}
within_clusters_sum_of_squares = 0
for(g in 1:nrow(x)){
within_clusters_sum_of_squares =  within_clusters_sum_of_squares + sum((x[g,] - centers[clusters[g],])^2)
}
y = list(clusters,centers, within_clusters_sum_of_squares)
names(y) = c("cluster partition", "cluster means", "within clusters sum of squares")
return(y)
}
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
kmeans(USArrests[,1:4],3)$tot.withinss
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
# Question 2
# a)
kmeans_function = function(x,k){
#making sure that the data entered are in matrix form
x = as.matrix(x)
#choosing the initial means randomly
initial_means = x[sample(nrow(x),size=k,replace=FALSE),]
old_clusters = rep(1,nrow(x))
clusters = rep(2, nrow(x))
# Create an empty matrix which will later be populated with the distance of the matrix
#points to the means
distance_from_means = matrix(nrow = nrow(x), ncol = k)
while(all(old_clusters != clusters)){
# Set the old clusters equal to the clusters found
old_clusters = clusters
for(i in 1:nrow(x)){
for(j in 1:k){
# Find the euclidian distance for each each row to the k randomly selected initial means
distance = sqrt(sum((x[i,] - initial_means[j,])^2))
# populate the columns of the matrix with the distances
distance_from_means[i,j] = distance
}
}
# Assign clusters based on which distance is closer to the means
clusters = apply(distance_from_means, 1, which.min)
# Find the means of the different clusters
centers = apply(x, 2, tapply, clusters, mean)
#for (s in 1:k){
#  for(g in 1:nrow(x)){
#    within_clusters_sum_of_squares = sum(x[clusters,] - centers[s,])^2
# }
#}
# Set the new means as the initial means in order to run the for loop with the new means
initial_means = centers
}
within_clusters_sum_of_squares = 0
for(g in 1:nrow(x)){
within_clusters_sum_of_squares =  within_clusters_sum_of_squares + sum((x[g,] - centers[clusters[g],])^2)
}
y = list(clusters,centers, within_clusters_sum_of_squares)
names(y) = c("cluster partition", "cluster means", "within clusters sum of squares")
return(y)
}
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
# Question 2
# a)
kmeans_function = function(x,k){
#making sure that the data entered are in matrix form
x = as.matrix(x)
#choosing the initial means randomly
initial_means = x[sample(nrow(x),size=k,replace=FALSE),]
old_clusters = rep(1,nrow(x))
clusters = rep(2, nrow(x))
# Create an empty matrix which will later be populated with the distance of the matrix
#points to the means
distance_from_means = matrix(nrow = nrow(x), ncol = k)
while(all(old_clusters != clusters)){
# Set the old clusters equal to the clusters found
old_clusters = clusters
for(i in 1:nrow(x)){
for(j in 1:k){
# Find the euclidian distance for each each row to the k randomly selected initial means
distance = sqrt(sum((x[i,] - initial_means[j,])^2))
# populate the columns of the matrix with the distances
distance_from_means[i,j] = distance
}
}
# Assign clusters based on which distance is closer to the means
clusters = apply(distance_from_means, 1, which.min)
# Find the means of the different clusters
centers = apply(x, 2, tapply, clusters, mean)
#for (s in 1:k){
#  for(g in 1:nrow(x)){
#    within_clusters_sum_of_squares = sum(x[clusters,] - centers[s,])^2
# }
#}
# Set the new means as the initial means in order to run the for loop with the new means
initial_means = centers
}
within_clusters_sum_of_squares = 0
for(g in 1:nrow(x)){
within_clusters_sum_of_squares =  within_clusters_sum_of_squares + sum((x[g,] - centers[clusters[g],])^2)
}
y = list(clusters,centers, within_clusters_sum_of_squares)
names(y) = c("cluster partition", "cluster means", "within clusters sum of squares")
return(y)
}
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
kmeans_function(USArrests[,1:4],3)
# Question 2
# a)
kmeans_function = function(x,k){
#making sure that the data entered are in matrix form
x = as.matrix(x)
#choosing the initial means randomly
initial_means = x[sample(nrow(x),size=k,replace=FALSE),]
old_clusters = rep(1,nrow(x))
clusters = rep(2, nrow(x))
# Create an empty matrix which will later be populated with the distance of the matrix
#points to the means
distance_from_means = matrix(nrow = nrow(x), ncol = k)
while(all(old_clusters != clusters)){
# Set the old clusters equal to the clusters found
old_clusters = clusters
for(i in 1:nrow(x)){
for(j in 1:k){
# Find the euclidian distance for each each row to the k randomly selected initial means
distance = sqrt(sum((x[i,] - initial_means[j,])^2))
# populate the columns of the matrix with the distances
distance_from_means[i,j] = distance
}
}
# Assign clusters based on which distance is closer to the means
clusters = apply(distance_from_means, 1, which.min)
# Find the means of the different clusters
centers = apply(x, 2, tapply, clusters, mean)
# Set the new means as the initial means in order to run the for loop with the new means
initial_means = centers
}
within_clusters_sum_of_squares = 0
for(g in 1:nrow(x)){
within_clusters_sum_of_squares =  within_clusters_sum_of_squares + sum((x[g,] - centers[clusters[g],])^2)
}
y = list(clusters,centers, within_clusters_sum_of_squares)
names(y) = c("cluster partition", "cluster means", "within clusters sum of squares")
return(y)
}
kmeans_function(gexpr_t,2)
s = 0
while(s < 60){
kmeans_function(USArrests[,1:4],3)
s = s +1
}
run_many_times = function(){
s = 0
while(s < 60){
kmeans_function(USArrests[,1:4],3)
s = s +1
}
}
run_many_times()
run_many_times = function(){
s = 0
while(s < 60){
kmeans_function(USArrests[,1:4],3)
s = s +1
}
return(kmeans_function(USArrests[,1:4],3))
}
run_many_times()
run_many_times = function(){
s = 0
while(s < 60){
kmeans_function(USArrests[,1:4],3)
s = s +1
return(kmeans_function(USArrests[,1:4],3))
}
}
run_many_times()
s = 0
while(s < 60){
kmeans_function(USArrests[,1:4],3)
s = s +1
return(kmeans_function(USArrests[,1:4],3))
}
s = 0
while(s < 60){
kmeans_function(USArrests[,1:4],3)
s = s +1
return(kmeans_function(USArrests[,1:4],3))
}
return(kmeans_function(USArrests[,1:4],3))
s = 0
while(s < 60){
s = s +1
return(kmeans_function(USArrests[,1:4],3))
}
s = 0
while(s < 60){
s = s +1
return(kmeans_function(USArrests[,1:4],3))
print(kmeans_function(USArrests[,1:4],3))
}
s = 0
while(s < 60){
s = s +1
result[s] = kmeans_function(USArrests[,1:4],3)
return(result)
}
y
s = 0
while(s < 60){
s = s +1
result = kmeans_function(USArrests[,1:4],3)
return(result)
}
s = 0
while(s < 60){
result = kmeans_function(USArrests[,1:4],3)
return(result)
s = s + 1
}
for(s in 1:50){
result = kmeans_function(USArrests[,1:4],3)
return(result)
}
for(s in 1:50){
result[[s]] = kmeans_function(USArrests[,1:4],3)
return(result)
}
print(result)
for(s in 1:50){
result[s] = kmeans_function(USArrests[,1:4],3)
return(result)
}
print(result)
for(s in 1:50){
result[s] = kmeans_function(USArrests[,1:4],3)
return(result)
}
print(result)
for(s in 1:50){
result = kmeans_function(USArrests[,1:4],3)
return(result)
}
print(result)
for(result in 1:50){
result = kmeans_function(USArrests[,1:4],3)
return(result)
}
print(result)
kmeans_function(USArrests[,1:4],3)
replicate(50, kmeans_function(USArrests[,1:4],3), simplify = FALSE)
run = replicate(50, kmeans_function(USArrests[,1:4],3), simplify = FALSE)
run
which.min(run)
run = replicate(50, kmeans_function(USArrests[,1:4],3), simplify = TRUE)
run
which.min(run)
run = replicate(50, kmeans_function(USArrests[,1:4],3), simplify = FALSE)
run
run
kmeans(USArrests[,1:4],3)$tot.withinss
run$"within clusters sum of squares"
run$"within clusters sum of squares"
run["within clusters sum of squares"]
run["within clusters sum of squares"]
kmeans_function(USArrests[,1:4],3)["within clusters sum of squares"]
is.list(run)
run["within clusters sum of squares"]
run
run[["within clusters sum of squares"]]
run
i = 1:50
run[[i]]$"within clusters sum of squares"
run[[1]]
run[[1],3]
run[[1]][3]
run[[i]][3]
run[[5]][3]
run[[6]][3]
run[[1:50]][3]
lapply(run, `[`, 1:50)
run[[6]][3]
for (i in 1:50){
wcv = run[[i]][3]
return(wcv)
}
wcv
for (i in 1:50){
wcv = numeric(50)
wcv[i] = run[[i]][3]
return(wcv)
}
wcv
run
for (i in 1:50){
wcv = numeric(50)
wcv[i] = run[[i]][3]
return(wcv[i])
}
wcv
print(wcv[i])
print(wcv[i])
#run the function 50 times
run = replicate(50, kmeans_function(USArrests[,1:4],3), simplify = FALSE)
run
is.list(run)
kmeans_function(USArrests[,1:4],3)["within clusters sum of squares"]
for (i in 1:50){
wcv = numeric(50)
wcv[i] = run[[i]][3]
return(wcv[i])
}
wcv
run[[1]][3]
run[[3]][3]
#run the function 50 times
run = replicate(50, kmeans_function(USArrests[,1:4],3), simplify = FALSE)
c = 1:50
c = 1:50
q = list(run[[c]][3]
)
kmeans_function(USArrests[,1:4],3)["within clusters sum of squares"]
as.data.frame(run)
sapply(run, "[[", 3)
ssw = sapply(run, "[[", 3)
is.vector(ssw)
which.min(ssw)
min(ssw)
kmeans(USArrests[,1:4],3)$tot.withinss
which(min(ssw))
ssw[min(ssw)]
which.min(ssw)
# Extract the third element
ssw = sapply(run, "[[", 3)
ssw
#We get that the first run generated the smallest ssw so we extract that run to compare it with the
#built in algorith
run[1]
km = kmeans(USArrests[,1:4],3)
#We get that the first run generated the smallest ssw so we extract that run to compare it with the
#built in algorith
first_run = run[1]
km = kmeans(USArrests[,1:4],3)
km$cluster
km$centers
first_run = run[1]
first_run
km = kmeans(USArrests[,1:4],3)
km$cluster
km$centers
km$tot.withinss
library(ProjectTemplate)
setwd("~/Documents")
setwd("~/Documents")
setwd("/Volumes/KINGSTON")
setwd("/Volumes/KINGSTON")
setwd("/Volumes/KINGSTON/Documents/iro/uni/Data management and EDA ")
library(ProjectTemplate)
setwd("/Volumes/KINGSTON/Documents/iro/uni/Data management and EDA ")
create.project("Data Management and EDA project")
library(ProjectTemplate)
setwd("/Volumes/KINGSTON")
create.project("Data Management and EDA project")
setwd("/Volumes/KINGSTON/Data Management and EDA project")
setwd("/Volumes/KINGSTON")
create.project("Data Management and EDA project")
setwd("Data Management and EDA project/reports")
knitr::opts_chunk$set(echo = TRUE)
tinytex::install_tinytex()
